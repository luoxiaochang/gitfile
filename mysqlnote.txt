#创建数据库及表
#创建数据库
hiyanlou:~/ sudo service mysql start  #打开MySQL
shiyanlou:~/ mysql -u root #使用root用户登录，实验楼环境的密码为空，直接回车就可以登录
mysql> show databases; #查看数据库
mysql> CREATE DATABASE mysql_shiyan;  #创建数据库mysql_shiyan #便于区分保留字和变量名，我们将保留字大写，把变量和数据小写
mysql> use information_schema;  #use <数据库名> 连接数据库

#加载数据库文件
shiyanlou:~/ cd Desktop  #进入桌面
shiyanlou/Desktop:~/ git clone https://github.com/shiyanlou/SQL3  #使用git下载文件
mysql> source /home/shiyanlou/Desktop/SQL3/MySQL-03-01.sql  #加载文件数据（直接连接该数据库）

#创建表
mysql> show tables; #查看表
mysql> CREATE TABLE employee(id int(10),name char(20),phone int(12));  #创建表employee
mysql> INSERT INTO (id,name,phone) VALUES (3,'Tom',2234)； #向表中插入数据

#退出mysql
mysql> quit/exit; 
mysql> Ctrl Z;

#约束
#创建主键（创建新表）
mysql> CREATE TABLE employee(id INT(10) PRIMARY KEY,name CHAR(20)); #单列主键
mysql> CREATE TABLE employee(id INT(10),name CHAR(20),PRIMARY KEY (id)); #单列主键
mysql> CREATE TABLE employee(id INT(10),name CHAR(20),CONSTRAINT PRIMARY KEY (id,name)); #多列主键
#创建主键（已有表新增）
mysql> ALTER TABLE employee
    -> ADD PRIMARY KEY (id);#单列主键
mysql> ALTER TABLE employee
    -> ADD CONSTRAINT pkname PRIMARY KEY (id,name);	#多列主键
#撤销主键
mysql> ALTER TABLE employee
    -> DROP PRIMARY KEY;

#创建外键（创建新表）
mysql> CREATE TABLE orders(id_o INT(10) PRIMARY KEY,ordernum INT(10) NOT NULL,id int(10),FOREIGN KEY (id) REFERENCES employee(id));#单列外键
mysql> CREATE TABLE orders(id_o INT(10) PRIMARY KEY,ordernum INT(10) NOT NULL,id int(10),CONSTRAINT fkname FOREIGN KEY (id) REFERENCES employee(id));#单列/多列外键
#创建外键（已有表新增）
mysql> ALTER TABLE employee
    -> ADD OREIGN KEY (id) REFERENCES employee(id));#单列主键
mysql> ALTER TABLE employee
    -> ADD CONSTRAINT fkname FOREIGN KEY (id) REFERENCES employee(id));#单列/多列主键
#撤销主键
mysql> ALTER TABLE employee
    -> DROP FOREIGN KEY fkname;

#默认值约束
#创建默认值（创建新表）
mysql> CREATE TABLE orders(id_o INT(10) PRIMARY KEY,ordernum INT(10) NOT NULL,id int(10) DEFAULT '10');
DEFAULT '10'/'Tom'/DATE()
#创建默认键（已有表新增）
mysql> ALTER TABLE employee
    -> ALTER name SET DEFAULT 'Tom';
#撤销默认值
mysql> ALTER TABLE employee
    -> ATTER employee DROP DEFAULT;

#唯一值约束
...UNIQUE (id);...CONSTRAINT uc_PersonID UNIQUE (Id_P,LastName)
#创建唯一值（已有表新增）
mysql> ALTER TABLE employee
    -> ADD UNIQUE (id);   #单列唯一
mysql> ALTER TABLE employee
    -> ADD CONSTRAINT unname UNIQUE (id,name);  #多列唯一
#撤销唯一值
mysql> ALTER TABLE employee
    -> DROP INDEX unname;	

#非空约束
NOT NULL

#CHECK 约束
...CHECK (id>10); CONSTRAINT chk_Person CHECK (Id_P>0 AND City='Sandnes');
ADD CHECK (id>10); ADD CONSTRAINT chk_Person CHECK (Id_P>0 AND City='Sandnes')	
DROP CHECK chk_Person;


#SELECT常用语句
mysql> SELECT name,age FROM employee;

#数学符号条件
mysql> SELECT name,age FROM employee WHERE age>25;

#“AND”与“OR”“BETWEEN"
mysql> SELECT name,age FROM employee WHERE age<25 OR age>30;
mysql> SELECT name,age FROM employee WHERE age>25 AND age<30;
mysql> 刚才的限制条件 age>25 AND age<30 ，如果需要包含25和30这两个数字的话，可以替换为 age BETWEEN 25 AND 30 ：

# IN 和 NOT IN
mysql> SELECT name,age,phone,in_dpt FROM employee WHERE in_dpt IN ('dpt3','dpt4');
mysql> SELECT name,age,phone,in_dpt FROM employee WHERE in_dpt NOT IN ('dpt1','dpt3');

#通配符
关键字 LIKE 在SQL语句中和通配符一起使用，通配符代表未知字符。SQL中的通配符是 _ 和 % 。其中 _ 代表一个未指定字符，% 代表不定个未指定字符
mysql> SELECT name,age,phone FROM employee WHERE phone LIKE '1101__';
mysql> SELECT name,age,phone FROM employee WHERE name LIKE 'J%';

#对结果排序
默认情况下，ORDER BY的结果是升序排列，而使用关键词ASC和DESC可指定升序或降序排序
mysql> SELECT name,age,salary,phone FROM employee ORDER BY salary DESC;

#SQL 内置函数和计算
SQL 允许对表中的数据进行计算。对此，SQL 有 5 个内置函数，这些函数都对 SELECT 的结果做操作：
函数名：	COUNT	SUM	     AVG	     MAX	MIN
作用：	    计数	求和	求平均值	最大值	最小值
mysql> SELECT MAX(salary) AS max_salary,MIN(salary) FROM employee;

#子查询
mysql> SELECT of_dpt,COUNT(proj_name) AS count_project FROM project
     -> WHERE of_dpt IN
     -> (SELECT in_dpt FROM employee WHERE name='Tom');

#连接查询
在处理多个表时，子查询只有在结果来自一个表时才有用。但如果需要显示两个表或多个表中的数据，这时就必须使用连接 (join) 操作。
连接的基本思想是把两个或多个表当作一个新的表来操作，如下：
mysql> SELECT id,name,people_num
    -> FROM employee,department
    -> WHERE employee.in_dpt = department.dpt_name
    -> ORDER BY id;
	
INNER JOIN 关键字语法
FULL JOIN 关键字语法
LEFT JOIN 关键字语法
RIGHT JOIN 关键字语法
mysql> SELECT column_name(s)
    -> FROM table_name1
    -> RIGHT JOIN table_name2 
    -> ON table_name1.column_name=table_name2.column_name
SQL UNION 语法
mysql> SELECT column_name(s) FROM table_name1
    -> UNION
    -> SELECT column_name(s) FROM table_name2
注释：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL


#修改和删除
#删除数据库
mysql> DROP DATABASE employee;

#重命名表
mysql> RENAME TABLE 原名 TO 新名字;
mysql> ALTER TABLE 原名 RENAME 新名;
mysql> ALTER TABLE 原名 RENAME TO 新名;	

#删除表
mysql> DROP TABLE 表名字;

#新增一列
mysql> ALTER TABLE 表名字 ADD COLUMN 列名字 数据类型 约束;
mysql> ALTER TABLE 表名字 ADD 列名字 数据类型 约束;
mysql> 新增加的列，被默认放置在这张表的最右边。如果要把增加的列插入在指定位置，则需要在语句的最后使用AFTER关键词(“AFTER 列1” 表示新增的列被放置在 “列1” 的后面)
mysql> ALTER TABLE employee ADD test INT(10) DEFAULT 11 FIRST;

#删除一列
mysql> ALTER TABLE 表名字 DROP COLUMN 列名字;
mysql> ALTER TABLE 表名字 DROP 列名字;

#重命名一列
mysql> ALTER TABLE 表名字 CHANGE 原列名 新列名 数据类型 约束;
注意：这条重命名语句后面的 “数据类型” 不能省略，否则重命名失败；修改数据类型可能会导致数据丢失，所以要慎重使用

#改变数据类型
mysql> ALTER TABLE 表名字 MODIFY 列名字 新数据类型;
修改数据类型可能会导致数据丢失，所以要慎重使用

#修改表中值
mysql> UPDATE 表名字 SET 列1=值1,列2=值2 WHERE 条件;

#删除一行记录
mysql> DELETE FROM 表名字 WHERE 条件;
删除表中的一行数据，也必须加上WHERE条件，否则整列的数据都会被删除


#索引视图导入导出备份
#索引
mysql> ALTER TABLE 表名字 ADD INDEX 索引名 (列名);
mysql> CREATE INDEX 索引名 ON 表名字 (列名);
mysql> SHOW INDEX FROM 表名字

#视图
mysql> CREATE VIEW 视图名(列a,列b,列c) AS SELECT 列1,列2,列3 FROM 表名字;
创建视图的语句，后半句是一个SELECT查询语句，所以视图也可以建立在多张表上，只需在SELECT语句中使用子查询或连接查询
mysql> SELECT * FROM v_emp;

#导入
导入操作，可以把一个文件里的数据保存进一张表
mysql> LOAD DATA INFILE '文件路径和文件名' INTO TABLE 表名字;

#导出
导出与导入是相反的过程，是把数据库某个表中的数据保存到一个文件之中
mysql> SELECT 列1，列2 INTO OUTFILE '文件路径和文件名' FROM 表名字;
注意：语句中 “文件路径” 之下不能已经有同名文件

#备份
备份与导出的区别：导出的文件只是保存数据库中的数据；而备份，则是把数据库的结构，包括数据、约束、索引、视图等全部另存为一个文件
mysqldump -u root 数据库名>备份文件名;   #备份整个数据库
mysqldump -u root 数据库名 表名字>备份文件名;  #备份整个表

#恢复
mysql> source /tmp/SQL6/MySQL-06.sql；  #备份文件恢复数据库 
mysql -u root test < bak.sql  另一种方式恢复数据库，但是在这之前我们先使用命令新建一个空的数据库 test，然后退出mysql











	
数据类型 	大小(字节) 	用途 	格式
INT 	        4 	    整数 	
FLOAT 	        4 	    单精度浮点数 	
DOUBLE 	        8 	    双精度浮点数 	
			
ENUM 		            单选,比如性别 	ENUM('a','b','c')
SET 		            多选 	SET('1','2','3')
DATE 	        3 	    日期 	YYYY-MM-DD
TIME 	        3 	    时间点或持续时间 	HH:MM:SS
YEAR 	        1 	    年份值 	YYYY
			
CHAR 	       0~255 	定长字符串 	
VARCHAR 	   0~255 	变长字符串 	
TEXT 	       0~65535 	长文本数据 
